{"ast":null,"code":"import qs from 'qs';\nimport axios from 'axios';\nimport { showLoading, hideLoading } from './loading';\naxios.defaults.withCredentials = true;\n\n// 是否是本地的mock数据脚本启动\nconst isDevelopmnetMock = process.env.NODE_MYENV === 'development_mock';\n\n// 创建axios 实例\nconst service = axios.create({\n  baseURL: isDevelopmnetMock ? '/api' : '',\n  // api的base_url\n  timeout: 30000 // 请求超时时间\n});\n\n// 添加请求拦截器\nservice.interceptors.request.use(function (config) {\n  const ajaxUrl = config.url;\n  // // 以下接口允许不检验token\n  const filterUrl = ['/front/h5/log'];\n  // 以下接口 Content-Type = application/json\n  const jsonUrl = ['/api/notice/qryCategory'];\n\n  // /*\n  //   ！！！ 特别警示：\n  //   在header头里增加任何信息时，请匆必衡量，是否加到下面的 【config.url.indexOf('markData/report/js/upload')<0】 条件里，否则所有埋点上报，均会失败\n  // */\n  if (jsonUrl.includes(ajaxUrl)) {\n    config.headers['Content-Type'] = 'application/json';\n    if (config.method === 'post') {\n      config.data = JSON.stringify(config.data);\n    }\n  } else {\n    config.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    if (config.method === 'post') {\n      config.data = qs.stringify({\n        ...config.data\n      });\n    }\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\nservice.interceptors.response.use(function (response) {\n  // -2001, \"token校验异常\",\n  // -2002, \"生成token异常\",\n  // -2003, \"用户token过期\",\n  // -2004, \"该token被登出\",\n  // -2005, \"AES密钥失效，需重新协商\",\n  document.getElementById('global-loading').style.display = 'none';\n  const responseCode = response.status;\n  if (responseCode === 200) {\n    console.log('请求成功');\n  }\n  return response;\n}, function (error) {\n  if (error.message.includes('timeout')) {\n    console.log('请求超时哦');\n    if (process.env.NODE_ENV != 'production') {\n      console.log('接口请求超时');\n    }\n  }\n  return Promise.reject(error);\n});\n\n/**\n * 封装get方法\n * @param url\n * @param data\n * @returns {Promise}\n */\nexport function get(url, params = {}) {\n  console.log('【GET】url: ', url, ' params: ', params);\n  return new Promise((resolve, reject) => {\n    service.get(url, {\n      params: params\n    }).then(response => {\n      if (response.data.head.code == '200') {\n        resolve(response.data.body);\n      } else {\n        reject(response.data);\n      }\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\n\n/**\n * 封装post请求\n * @param url\n * @param data\n * @returns {Promise}\n */\nexport function post(url, data = {}) {\n  console.log('【POST】url: ', url, ' params: ', data, '\\nNODE_ENV:', process.env.NODE_ENV);\n  return new Promise((resolve, reject) => {\n    if (isDevelopmnetMock) {\n      // 测试环境走mock数据\n      service.get(url, data).then(response => {\n        if (response.data.head.code == '200') {\n          resolve(response.data.body);\n        } else {\n          reject(response.data);\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    } else {\n      service.post(url, data).then(response => {\n        if (response.data.head.code == '200') {\n          resolve(response.data.body);\n        } else {\n          reject(response.data);\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    }\n  });\n}\n\n/**\n * 延迟发送get请求,模拟接口请求时长\n * @param {url}  请求URL\n * @param {data} 请求参数\n * @param {delayTime} 延迟时间:s,默认0.8s\n */\nexport function deleyGet({\n  url,\n  data = {},\n  delayTime = 0.8\n}) {\n  console.log(\"deleyGet_begin:\", url);\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(get(url, data));\n    }, delayTime * 1000);\n  });\n}","map":{"version":3,"names":["qs","axios","showLoading","hideLoading","defaults","withCredentials","isDevelopmnetMock","process","env","NODE_MYENV","service","create","baseURL","timeout","interceptors","request","use","config","ajaxUrl","url","filterUrl","jsonUrl","includes","headers","method","data","JSON","stringify","error","Promise","reject","response","document","getElementById","style","display","responseCode","status","console","log","message","NODE_ENV","get","params","resolve","then","head","code","body","catch","err","post","deleyGet","delayTime","setTimeout"],"sources":["/Users/zhangjunjun/Git/My_H5/ReactThunk/webpack_expose/src/utils/callAPI.js"],"sourcesContent":["import qs from 'qs'\nimport axios from 'axios';\nimport {showLoading, hideLoading} from './loading'\n\naxios.defaults.withCredentials = true;\n\n// 是否是本地的mock数据脚本启动\nconst isDevelopmnetMock = process.env.NODE_MYENV === 'development_mock' \n\n// 创建axios 实例\nconst service = axios.create({\n    baseURL: isDevelopmnetMock ? '/api' : '', // api的base_url\n    timeout: 30000 // 请求超时时间\n})\n\n// 添加请求拦截器\nservice.interceptors.request.use(function (config) {\n    const ajaxUrl = config.url\n    // // 以下接口允许不检验token\n    const filterUrl = [\n      '/front/h5/log'\n    ]\n    // 以下接口 Content-Type = application/json\n    const jsonUrl = [\n      '/api/notice/qryCategory',\n    ]\n  \n    // /*\n    //   ！！！ 特别警示：\n    //   在header头里增加任何信息时，请匆必衡量，是否加到下面的 【config.url.indexOf('markData/report/js/upload')<0】 条件里，否则所有埋点上报，均会失败\n    // */\n    if (jsonUrl.includes(ajaxUrl)) {\n      config.headers['Content-Type'] = 'application/json'\n      if (config.method === 'post') {\n        config.data = JSON.stringify(config.data)\n      }\n    } else {\n      config.headers['Content-Type'] = 'application/x-www-form-urlencoded'\n      if (config.method === 'post') {\n        config.data = qs.stringify({\n          ...config.data\n        })\n      }\n    }\n    return config\n  }, function (error) {\n    return Promise.reject(error)\n  })\n  \n  // 添加响应拦截器\n  service.interceptors.response.use(function (response) {\n    // -2001, \"token校验异常\",\n    // -2002, \"生成token异常\",\n    // -2003, \"用户token过期\",\n    // -2004, \"该token被登出\",\n    // -2005, \"AES密钥失效，需重新协商\",\n    document.getElementById('global-loading').style.display = 'none'\n    const responseCode = response.status\n    if (responseCode === 200) {\n        console.log('请求成功')\n    }\n    return response\n  }, function (error) {\n    if (error.message.includes('timeout')) {\n      console.log('请求超时哦')\n      if (process.env.NODE_ENV != 'production') {\n        console.log('接口请求超时')\n      }\n    }\n    return Promise.reject(error)\n  })\n  \n  /**\n   * 封装get方法\n   * @param url\n   * @param data\n   * @returns {Promise}\n   */\n  export function get(url, params = {}) {\n    console.log('【GET】url: ', url, ' params: ', params);\n    return new Promise((resolve, reject) => {\n      service.get(url, {params: params})\n        .then(response => {\n          if (response.data.head.code == '200') {\n            resolve(response.data.body)\n          } else {\n            reject(response.data)\n          }\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n  }\n  \n  /**\n   * 封装post请求\n   * @param url\n   * @param data\n   * @returns {Promise}\n   */\n  export function post(url, data = {}) {\n    console.log('【POST】url: ', url, ' params: ', data,'\\nNODE_ENV:',process.env.NODE_ENV);\n    return new Promise((resolve, reject) => {\n      if (isDevelopmnetMock) {\n        // 测试环境走mock数据\n        service.get(url, data)\n          .then(response => {\n            if (response.data.head.code == '200') {\n              resolve(response.data.body)\n            } else {\n              reject(response.data)\n            }\n          })\n          .catch(err => {\n            reject(err)\n          })\n      } else {\n        service.post(url, data)\n          .then(response => {\n            if (response.data.head.code == '200') {\n              resolve(response.data.body)\n            } else {\n              reject(response.data)\n            }\n          })\n          .catch(err => {\n            reject(err)\n          })\n      }\n    })\n  }\n\n  /**\n   * 延迟发送get请求,模拟接口请求时长\n   * @param {url}  请求URL\n   * @param {data} 请求参数\n   * @param {delayTime} 延迟时间:s,默认0.8s\n   */\n  export function deleyGet({url,data = {},delayTime=0.8}) {\n    console.log(\"deleyGet_begin:\",url)\n        return new Promise((resolve)=>{\n            setTimeout(() => {\n                resolve(get(url,data));\n            }, delayTime * 1000);\n        })\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}