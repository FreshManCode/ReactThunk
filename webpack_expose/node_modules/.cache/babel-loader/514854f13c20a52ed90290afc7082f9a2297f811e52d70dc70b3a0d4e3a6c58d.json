{"ast":null,"code":"class EventEmitter {\n  constructor() {\n    // 管理事件发布-订阅的 map\n    this.eventMap = {};\n  }\n\n  // 订阅\n  on(type, handler) {\n    if (!(handler instanceof Function)) {\n      throw new Error('handler 只能是Function');\n    }\n    // 判断type 事件对应的队列是否存在\n    if (!this.eventMap[type]) {\n      // 若不存在,新建该队列\n      this.eventMap[type] = [];\n    }\n    // 若存在,直接往队列里推入handler\n    this.eventMap[type].push(handler);\n  }\n\n  // 发布,触发时是可以携带参数的,params就是数据的载体\n  emit(type, params) {\n    // 假设该事件是有订阅的(对应的事件队列存在)\n    if (this.eventMap[type]) {\n      // 将事件队列的handler依次执行出队\n      this.eventMap[type].forEach((handler, index) => {\n        // 注意携带参数\n        handler(params);\n      });\n    }\n  }\n  off(type, handler) {\n    if (this.eventMap[type]) {\n      this.eventMap[type].splice(this.eventMap[type].indexOf(handler) >>> 0, 1);\n    }\n  }\n  static initInstance() {\n    if (!window.myEvent) {\n      const myEvent = new EventEmitter();\n      window.myEvent = myEvent;\n    }\n  }\n}\nexport default EventEmitter;","map":{"version":3,"names":["EventEmitter","constructor","eventMap","on","type","handler","Function","Error","push","emit","params","forEach","index","off","splice","indexOf","initInstance","window","myEvent"],"sources":["/Users/zhangjunjun/Git/My_H5/ReactThunk/webpack_expose/src/utils/EventEmitter.js"],"sourcesContent":["class EventEmitter{\n    constructor(){\n        // 管理事件发布-订阅的 map\n        this.eventMap = {\n\n        }\n    }\n\n    // 订阅\n    on (type,handler){\n        if (!(handler instanceof(Function))) {\n            throw new Error('handler 只能是Function')\n        }\n        // 判断type 事件对应的队列是否存在\n        if(!this.eventMap[type]){\n            // 若不存在,新建该队列\n            this.eventMap[type] = []\n        }\n        // 若存在,直接往队列里推入handler\n        this.eventMap[type].push(handler)\n    }\n\n    // 发布,触发时是可以携带参数的,params就是数据的载体\n    emit(type,params){\n        // 假设该事件是有订阅的(对应的事件队列存在)\n        if(this.eventMap[type]){\n            // 将事件队列的handler依次执行出队\n            this.eventMap[type].forEach((handler,index) => {\n                // 注意携带参数\n                handler(params)\n            });\n        }\n\n    }\n\n    off(type,handler){\n        if(this.eventMap[type]){\n            this.eventMap[type].splice(this.eventMap[type].indexOf(handler)>>>0,1)\n        }\n    }\n\n    static initInstance() {\n        if (!window.myEvent){\n            const myEvent = new EventEmitter()\n            window.myEvent = myEvent\n        }\n    }\n\n}\n\nexport default EventEmitter"],"mappings":"AAAA,MAAMA,YAAY;EACdC,WAAW,GAAE;IACT;IACA,IAAI,CAACC,QAAQ,GAAG,CAEhB,CAAC;EACL;;EAEA;EACAC,EAAE,CAAEC,IAAI,EAACC,OAAO,EAAC;IACb,IAAI,EAAEA,OAAO,YAAYC,QAAS,CAAC,EAAE;MACjC,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IAC1C;IACA;IACA,IAAG,CAAC,IAAI,CAACL,QAAQ,CAACE,IAAI,CAAC,EAAC;MACpB;MACA,IAAI,CAACF,QAAQ,CAACE,IAAI,CAAC,GAAG,EAAE;IAC5B;IACA;IACA,IAAI,CAACF,QAAQ,CAACE,IAAI,CAAC,CAACI,IAAI,CAACH,OAAO,CAAC;EACrC;;EAEA;EACAI,IAAI,CAACL,IAAI,EAACM,MAAM,EAAC;IACb;IACA,IAAG,IAAI,CAACR,QAAQ,CAACE,IAAI,CAAC,EAAC;MACnB;MACA,IAAI,CAACF,QAAQ,CAACE,IAAI,CAAC,CAACO,OAAO,CAAC,CAACN,OAAO,EAACO,KAAK,KAAK;QAC3C;QACAP,OAAO,CAACK,MAAM,CAAC;MACnB,CAAC,CAAC;IACN;EAEJ;EAEAG,GAAG,CAACT,IAAI,EAACC,OAAO,EAAC;IACb,IAAG,IAAI,CAACH,QAAQ,CAACE,IAAI,CAAC,EAAC;MACnB,IAAI,CAACF,QAAQ,CAACE,IAAI,CAAC,CAACU,MAAM,CAAC,IAAI,CAACZ,QAAQ,CAACE,IAAI,CAAC,CAACW,OAAO,CAACV,OAAO,CAAC,KAAG,CAAC,EAAC,CAAC,CAAC;IAC1E;EACJ;EAEA,OAAOW,YAAY,GAAG;IAClB,IAAI,CAACC,MAAM,CAACC,OAAO,EAAC;MAChB,MAAMA,OAAO,GAAG,IAAIlB,YAAY,EAAE;MAClCiB,MAAM,CAACC,OAAO,GAAGA,OAAO;IAC5B;EACJ;AAEJ;AAEA,eAAelB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}