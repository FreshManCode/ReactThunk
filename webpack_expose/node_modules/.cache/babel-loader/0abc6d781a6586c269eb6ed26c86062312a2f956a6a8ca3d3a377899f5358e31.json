{"ast":null,"code":"var _jsxFileName = \"/Users/zhangjunjun/Git/My_H5/ReactThunk/webpack_expose/src/pages/MockJs/index.js\";\nimport React from 'react';\nimport './index.scss';\nimport { objctData, userInfo } from './mockData';\nimport { Button } from 'antd';\nimport EventEmitter from '@/utils/EventEmitter';\n\n// 实例化 EventEmitter\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nEventEmitter.initInstance();\nconst myEvent = window.myEvent;\nclass MockJS extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initEmitOn = () => {\n      // 编写简单的handler \n      const testHandler = params => {\n        console.log(`testHandler 事件被触发了,testHandler收到的入参是${params}`);\n      };\n      // 监听test事件\n      myEvent.on(\"test\", testHandler);\n    };\n    this.testMockJS1 = () => {\n      this.setState({\n        showText: JSON.stringify(objctData)\n      });\n      console.log('objctData:', objctData, 'jsonData:', JSON.stringify(objctData));\n    };\n    this.testMockJS2 = () => {\n      this.setState({\n        showText: JSON.stringify(userInfo)\n      });\n      console.log('userInfo:', userInfo, 'jsonData:', JSON.stringify(userInfo));\n    };\n    this.coptTest = () => {\n      var link = \"https://blog.csdn.net/FreshManCode/article/details/116498154?spm=1001.2014.3001.5502\";\n      const input = document.createElement('input');\n      document.body.appendChild(input);\n      input.setAttribute('value', link);\n      input.select();\n      if (document.execCommand('copy')) {\n        document.execCommand('copy');\n        alert('复制链接成功');\n      }\n      document.body.removeChild(input);\n    };\n    this.state = {\n      name: \"test\",\n      age: \"libai\",\n      showText: ''\n    };\n    this.initEmitOn();\n  }\n\n  // 监听test 事件\n\n  // 需要一个对象格式的返回值 这是一个静态方法\n  static getDerivedStateFromProps(props, state) {\n    console.log('super_getDerivedStateFromProps', props);\n    return null;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MockJS\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"MockJS\\u6D4B\\u8BD5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contentWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          onClick: this.testMockJS1,\n          children: \"\\u6D4B\\u8BD5MockJS1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          onClick: this.testMockJS2,\n          children: \"\\u6D4B\\u8BD5MockJS2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          onClick: this.coptTest,\n          children: \"copy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ShowTextChild, {\n        showText: this.state.showText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(EventChild, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 16\n    }, this);\n  }\n}\nexport default MockJS;\nclass ShowTextChild extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newText: \"我想去桂林\"\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    console.log('getDerivedStateFromProps:', props, '\\nstate:', state);\n    const text = props.showText ? props.showText : '';\n    return {\n      showText: text,\n      newText: text.length > 2 ? text.slice(0, text.length / 2) : '我想去桂林'\n    };\n  }\n\n  // 替代  componentWillUpdate\n  getSnapshotBeforeUpdate(preProps, preState) {\n    console.log('getSnapshotBeforeUpdate');\n    return \"哈哈\";\n  }\n  componentDidUpdate() {\n    console.log('componentDidUpdate');\n  }\n  render() {\n    const {\n      showText\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"showTextChildWrapper\",\n      children: [showText, /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.newText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 16\n    }, this);\n  }\n}\nclass EventChild extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.sendEvent = () => {\n      console.log('sendEvent_sendEvent');\n      myEvent.emit(\"test\", \"我是从子组件发送过去的哈哈哈\");\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"eventChild\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        className: \"button\",\n        onClick: this.sendEvent,\n        children: \"\\u5B50\\u7EC4\\u4EF6\\u4F7F\\u7528EventEmitter\\u53D1\\u9001\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 16\n    }, this);\n  }\n}","map":{"version":3,"names":["React","objctData","userInfo","Button","EventEmitter","initInstance","myEvent","window","MockJS","Component","constructor","props","initEmitOn","testHandler","params","console","log","on","testMockJS1","setState","showText","JSON","stringify","testMockJS2","coptTest","link","input","document","createElement","body","appendChild","setAttribute","select","execCommand","alert","removeChild","state","name","age","getDerivedStateFromProps","render","ShowTextChild","newText","text","length","slice","getSnapshotBeforeUpdate","preProps","preState","componentDidUpdate","EventChild","sendEvent","emit"],"sources":["/Users/zhangjunjun/Git/My_H5/ReactThunk/webpack_expose/src/pages/MockJs/index.js"],"sourcesContent":["import React from 'react'\nimport './index.scss'\nimport {objctData,userInfo} from './mockData'\nimport {Button} from 'antd'\nimport EventEmitter from  '@/utils/EventEmitter'\n\n\n// 实例化 EventEmitter\nEventEmitter.initInstance()\nconst myEvent = window.myEvent;\nclass MockJS extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            name:\"test\",\n            age:\"libai\",\n            showText:'',\n        }\n        this.initEmitOn();\n        \n    }\n\n   \n\n\n    // 监听test 事件\n    initEmitOn = ()=> {\n        // 编写简单的handler \n        const testHandler = (params)=>{\n            console.log(`testHandler 事件被触发了,testHandler收到的入参是${params}`);\n        }\n        // 监听test事件\n        myEvent.on(\"test\",testHandler)\n    }\n    \n    \n    \n\n\n    // 需要一个对象格式的返回值 这是一个静态方法\n    static getDerivedStateFromProps(props,state) {\n        console.log('super_getDerivedStateFromProps',props);\n        return null\n    }\n\n    testMockJS1 = ()=>{\n        this.setState({\n            showText:JSON.stringify(objctData)\n        })\n        console.log('objctData:',objctData,'jsonData:',JSON.stringify(objctData));\n    }\n\n    testMockJS2 = ()=>{\n        this.setState({\n            showText:JSON.stringify(userInfo)\n        })\n        console.log('userInfo:',userInfo,'jsonData:',JSON.stringify(userInfo));\n    }\n\n    coptTest = ()=>{\n            var link = \"https://blog.csdn.net/FreshManCode/article/details/116498154?spm=1001.2014.3001.5502\" ;\n            const input = document.createElement('input');\n            document.body.appendChild(input);\n            input.setAttribute('value', link);\n            input.select();\n            if (document.execCommand('copy')) {\n                document.execCommand('copy');\n                alert('复制链接成功')\n            }\n            document.body.removeChild(input);\n\n    }\n\n\n    render() {\n        return <div className='MockJS'>\n                <h3>MockJS测试</h3>\n                <div className='contentWrapper'>\n                    <Button className='button' onClick={this.testMockJS1}>测试MockJS1</Button>\n                    <Button className='button' onClick={this.testMockJS2}>测试MockJS2</Button>\n                    <Button className=\"button\" onClick={this.coptTest}>copy</Button>\n                    \n                </div>\n               <ShowTextChild showText={this.state.showText}></ShowTextChild>\n               <EventChild/>\n        </div>\n    }\n}\nexport default MockJS;\n\n\nclass ShowTextChild extends React.Component{\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            newText:\"我想去桂林\",\n\n        }\n    }\n\n    static getDerivedStateFromProps(props,state) {\n        console.log('getDerivedStateFromProps:',props,'\\nstate:',state)\n        const text = props.showText ? props.showText : ''\n        return {\n            showText:text,\n            newText:text.length > 2 ? text.slice(0,text.length/2) : '我想去桂林'\n        }\n        \n    }\n\n\n\n    // 替代  componentWillUpdate\n    getSnapshotBeforeUpdate(preProps,preState) {\n        console.log('getSnapshotBeforeUpdate')\n        return \"哈哈\"\n\n    }\n\n    componentDidUpdate() {\n        console.log('componentDidUpdate');\n    }\n\n    render(){\n        const {showText} = this.props\n        return <div className=\"showTextChildWrapper\">\n            {showText}\n            <p>\n                {this.state.newText}\n            </p>\n        </div>\n    }\n}\n\n\nclass EventChild extends React.Component {\n\n    sendEvent = ()=>{\n        console.log('sendEvent_sendEvent');\n        myEvent.emit(\"test\",\"我是从子组件发送过去的哈哈哈\")\n    }\n    render() {\n        return <div className=\"eventChild\">\n            <Button className=\"button\" onClick={this.sendEvent}>\n                子组件使用EventEmitter发送\n            </Button>\n\n        </div>\n    }\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AACrB,SAAQC,SAAS,EAACC,QAAQ,QAAO,YAAY;AAC7C,SAAQC,MAAM,QAAO,MAAM;AAC3B,OAAOC,YAAY,MAAO,sBAAsB;;AAGhD;AAAA;AACAA,YAAY,CAACC,YAAY,EAAE;AAC3B,MAAMC,OAAO,GAAGC,MAAM,CAACD,OAAO;AAC9B,MAAME,MAAM,SAASR,KAAK,CAACS,SAAS,CAAC;EAEjCC,WAAW,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IAAA,KAchBC,UAAU,GAAG,MAAK;MACd;MACA,MAAMC,WAAW,GAAIC,MAAM,IAAG;QAC1BC,OAAO,CAACC,GAAG,CAAE,uCAAsCF,MAAO,EAAC,CAAC;MAChE,CAAC;MACD;MACAR,OAAO,CAACW,EAAE,CAAC,MAAM,EAACJ,WAAW,CAAC;IAClC,CAAC;IAAA,KAYDK,WAAW,GAAG,MAAI;MACd,IAAI,CAACC,QAAQ,CAAC;QACVC,QAAQ,EAACC,IAAI,CAACC,SAAS,CAACrB,SAAS;MACrC,CAAC,CAAC;MACFc,OAAO,CAACC,GAAG,CAAC,YAAY,EAACf,SAAS,EAAC,WAAW,EAACoB,IAAI,CAACC,SAAS,CAACrB,SAAS,CAAC,CAAC;IAC7E,CAAC;IAAA,KAEDsB,WAAW,GAAG,MAAI;MACd,IAAI,CAACJ,QAAQ,CAAC;QACVC,QAAQ,EAACC,IAAI,CAACC,SAAS,CAACpB,QAAQ;MACpC,CAAC,CAAC;MACFa,OAAO,CAACC,GAAG,CAAC,WAAW,EAACd,QAAQ,EAAC,WAAW,EAACmB,IAAI,CAACC,SAAS,CAACpB,QAAQ,CAAC,CAAC;IAC1E,CAAC;IAAA,KAEDsB,QAAQ,GAAG,MAAI;MACP,IAAIC,IAAI,GAAG,sFAAsF;MACjG,MAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;MAC7CD,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACJ,KAAK,CAAC;MAChCA,KAAK,CAACK,YAAY,CAAC,OAAO,EAAEN,IAAI,CAAC;MACjCC,KAAK,CAACM,MAAM,EAAE;MACd,IAAIL,QAAQ,CAACM,WAAW,CAAC,MAAM,CAAC,EAAE;QAC9BN,QAAQ,CAACM,WAAW,CAAC,MAAM,CAAC;QAC5BC,KAAK,CAAC,QAAQ,CAAC;MACnB;MACAP,QAAQ,CAACE,IAAI,CAACM,WAAW,CAACT,KAAK,CAAC;IAExC,CAAC;IA1DG,IAAI,CAACU,KAAK,GAAG;MACTC,IAAI,EAAC,MAAM;MACXC,GAAG,EAAC,OAAO;MACXlB,QAAQ,EAAC;IACb,CAAC;IACD,IAAI,CAACR,UAAU,EAAE;EAErB;;EAKA;;EAcA;EACA,OAAO2B,wBAAwB,CAAC5B,KAAK,EAACyB,KAAK,EAAE;IACzCrB,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAACL,KAAK,CAAC;IACnD,OAAO,IAAI;EACf;EA+BA6B,MAAM,GAAG;IACL,oBAAO;MAAK,SAAS,EAAC,QAAQ;MAAA,wBACtB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAiB,eACjB;QAAK,SAAS,EAAC,gBAAgB;QAAA,wBAC3B,QAAC,MAAM;UAAC,SAAS,EAAC,QAAQ;UAAC,OAAO,EAAE,IAAI,CAACtB,WAAY;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAmB,eACxE,QAAC,MAAM;UAAC,SAAS,EAAC,QAAQ;UAAC,OAAO,EAAE,IAAI,CAACK,WAAY;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAmB,eACxE,QAAC,MAAM;UAAC,SAAS,EAAC,QAAQ;UAAC,OAAO,EAAE,IAAI,CAACC,QAAS;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAc;MAAA;QAAA;QAAA;QAAA;MAAA,QAE9D,eACP,QAAC,aAAa;QAAC,QAAQ,EAAE,IAAI,CAACY,KAAK,CAAChB;MAAS;QAAA;QAAA;QAAA;MAAA,QAAiB,eAC9D,QAAC,UAAU;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QACd;EACV;AACJ;AACA,eAAeZ,MAAM;AAGrB,MAAMiC,aAAa,SAASzC,KAAK,CAACS,SAAS;EAEvCC,WAAW,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACyB,KAAK,GAAG;MACTM,OAAO,EAAC;IAEZ,CAAC;EACL;EAEA,OAAOH,wBAAwB,CAAC5B,KAAK,EAACyB,KAAK,EAAE;IACzCrB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAACL,KAAK,EAAC,UAAU,EAACyB,KAAK,CAAC;IAC/D,MAAMO,IAAI,GAAGhC,KAAK,CAACS,QAAQ,GAAGT,KAAK,CAACS,QAAQ,GAAG,EAAE;IACjD,OAAO;MACHA,QAAQ,EAACuB,IAAI;MACbD,OAAO,EAACC,IAAI,CAACC,MAAM,GAAG,CAAC,GAAGD,IAAI,CAACE,KAAK,CAAC,CAAC,EAACF,IAAI,CAACC,MAAM,GAAC,CAAC,CAAC,GAAG;IAC5D,CAAC;EAEL;;EAIA;EACAE,uBAAuB,CAACC,QAAQ,EAACC,QAAQ,EAAE;IACvCjC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,OAAO,IAAI;EAEf;EAEAiC,kBAAkB,GAAG;IACjBlC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EACrC;EAEAwB,MAAM,GAAE;IACJ,MAAM;MAACpB;IAAQ,CAAC,GAAG,IAAI,CAACT,KAAK;IAC7B,oBAAO;MAAK,SAAS,EAAC,sBAAsB;MAAA,WACvCS,QAAQ,eACT;QAAA,UACK,IAAI,CAACgB,KAAK,CAACM;MAAO;QAAA;QAAA;QAAA;MAAA,QACnB;IAAA;MAAA;MAAA;MAAA;IAAA,QACF;EACV;AACJ;AAGA,MAAMQ,UAAU,SAASlD,KAAK,CAACS,SAAS,CAAC;EAAA;IAAA;IAAA,KAErC0C,SAAS,GAAG,MAAI;MACZpC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCV,OAAO,CAAC8C,IAAI,CAAC,MAAM,EAAC,gBAAgB,CAAC;IACzC,CAAC;EAAA;EACDZ,MAAM,GAAG;IACL,oBAAO;MAAK,SAAS,EAAC,YAAY;MAAA,uBAC9B,QAAC,MAAM;QAAC,SAAS,EAAC,QAAQ;QAAC,OAAO,EAAE,IAAI,CAACW,SAAU;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAE1C;MAAA;MAAA;MAAA;IAAA,QAEP;EACV;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}